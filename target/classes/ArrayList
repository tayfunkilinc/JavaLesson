/*ArrayList, dinamik boyutlu bir array’dir;
         eleman ekleyip çıkarırken boyutu otomatik olarak ayarlanır.
         Gerçek hayatta bir alışveriş listesi gibi düşünülebilir.
         Alışveriş listesi, ürün isimlerini içerir ve bu isimler String türündedir.*/
/*

/*
1)Array'ler primitive data type'lari ve reference'lari depolayabilir ama Arraylist'ler
non-primitive'leri (reference'lari) depolar
2)ArrayListler memory'de Array'lerden daha fazla yer kaplar
3)Array'ler olusturulurken bastan eleman sayisini belirtmek zorundayiz
4)ArrayList'ler eleman sayisinda esnektirler.
5) Array'leri Java niye iptal etmedi?
    a) Array'ler cok daha hizlidir
    b) Array'ler memory'de cok az yer kaplarlar
    c) Bu nedenle eleman sayisi belli olan datalari depolamak icin Array'ler tercih edilir

6) Java'da generic (kapsamli) türler (<> ile belirtilen türler) için yalnızca referans
veri türleri kullanılabilir. Primitive veri türleri (örneğin int, char, boolean, double, vb.)
 doğrudan generic türlerin içine yerleştirilemez. Bu nedenle, özel bir durumla karşılaştığınızda,
 bu türleri ilgili sınıflarla sarmalamanız (wrapper) gerekir.
*/


ArrayList nasil olusturulur?
NOT:  ArrayList<Integer> ages = new ArrayList<Integer>(); //Java 6 ve oncesinde bu sekilde yaziliyordu yazmaya gerek yok diye kaldirildi
ArrayList<Integer> ages = new ArrayList<>(); //Java 7 ve sonrasi bu cikarima : -type inference "-tip cikarimi"

ArrayList'lere eleman nasil eklenir?
add() metodu, ArrayList'e yeni bir eleman eklemek için kullanılır ve eklenen elemanı listenin sonuna yerleştirir.
ArrayListler dogrudan yazdirilirlar System.out.println(ages); //[9, 28, 12, 5]

//List'te araya eleman eklemek icin index numarasini yazariz
        ages.add(1, 28); // 1. indexe 28 ekledi geri kalanlari bir ileri oteledi
        System.out.println(ages); //[9, 28, 12, 5]
//add(int index, E element): Bu metot, belirtilen elemanı ArrayList'in belirtilen konumuna ekler.
Mevcut elemanlar sağa kaydırılır.
--------------------------


